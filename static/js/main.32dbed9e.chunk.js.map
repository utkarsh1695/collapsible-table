{"version":3,"sources":["logo.svg","data.js","TableRow.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TableRow","props","toggleExpander","setState","isExpanded","state","getExpanderButton","subRowData","buttonText","length","onClick","getSubRows","map","data","index","className","key","question","answer","this","Component","App","getModifiedData","modifiedData","temp","forEach","element","hasOwnProperty","push","Object","keys","currentRow","subRows","slice","console","log","data1","row","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.32dbed9e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export default [\n  { \"question_id\": 1234, \"user_id\": \"abcd\", \"question\": \"Who is Jack Porter?\", \"answer\": \"Jack Porter is the CEO of Cognizer Inc.\", \"source\": \"BOX\", \"doc_id\": \"abcd1234\", \"like\": true, \"feedback\": null },\n  { \"question_id\": 1001, \"user_id\": \"abcd\", \"question\": \"Who is Sue Porter?\", \"answer\": \"Sue Porter is the wife of Jack\", \"source\": \"BOX\", \"doc_id\": \"abcd1234\", \"like\": false, \"feedback\": null },\n  { \"question_id\": 1002, \"user_id\": \"abcd\", \"question\": \"Who is Sue Porter?\", \"answer\": \"Sue Porter is the wife of Jack\", \"source\": \"BOX\", \"doc_id\": \"abcd1234\", \"like\": false, \"feedback\": null },\n  { \"question_id\": 1236, \"user_id\": \"abcd\", \"question\": \"Who is Jackc Porter?\", \"answer\": \"Jack Porter is the CEO of Cognizer Inc.\", \"source\": \"BOX\", \"doc_id\": \"abcd1234\", \"like\": true, \"feedback\": null },\n  { \"question_id\": 1012, \"user_id\": \"abcd\", \"question\": \"Who is Sue Porter?\", \"answer\": \"Sue Porter is the wife of Jack\", \"source\": \"BOX\", \"doc_id\": \"abcd1234\", \"like\": false, \"feedback\": null },\n  { \"question_id\": 1235, \"user_id\": \"abcd\", \"question\": \"Who is Jack Porter?\", \"answer\": \"Jack Porter is the CEO of Cognizer Inc.\", \"source\": \"BOX\", \"doc_id\": \"abcd1234\", \"like\": true, \"feedback\": null }\n];\n\nconst modifiedData = [\n  {\n    \"question_id\": 1234, \"user_id\": \"abcd\", \"question\": \"Who is Jack Porter?\", \"answer\": \"Jack Porter is the CEO of Cognizer Inc.\", \"source\": \"BOX\", \"doc_id\": \"abcd1234\", \"like\": true, \"feedback\": null, subDataRow: [\n      { \"question_id\": 1235, \"user_id\": \"abcd\", \"question\": \"Who is Jack Porter?\", \"answer\": \"Jack Porter is the CEO of Cognizer Inc.\", \"source\": \"BOX\", \"doc_id\": \"abcd1234\", \"like\": true, \"feedback\": null },\n      { \"question_id\": 1235, \"user_id\": \"abcd\", \"question\": \"Who is Jack Porter?\", \"answer\": \"Jack Porter is the CEO of Cognizer Inc.\", \"source\": \"BOX\", \"doc_id\": \"abcd1234\", \"like\": true, \"feedback\": null }\n    ]\n  },\n  {\n    \"question_id\": 1001, \"user_id\": \"abcd\", \"question\": \"Who is Sue Porter?\", \"answer\": \"Sue Porter is the wife of Jack\", \"source\": \"BOX\", \"doc_id\": \"abcd1234\", \"like\": false, \"feedback\": null, subDataRow: [\n      { \"question_id\": 1002, \"user_id\": \"abcd\", \"question\": \"Who is Sue Porter?\", \"answer\": \"Sue Porter is the wife of Jack\", \"source\": \"BOX\", \"doc_id\": \"abcd1234\", \"like\": false, \"feedback\": null },\n      { \"question_id\": 1012, \"user_id\": \"abcd\", \"question\": \"Who is Sue Porter?\", \"answer\": \"Sue Porter is the wife of Jack\", \"source\": \"BOX\", \"doc_id\": \"abcd1234\", \"like\": false, \"feedback\": null },\n    ]\n  },\n]","import React, { Component } from 'react'\n\nexport default class TableRow extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isExpanded: false\n    }\n  }\n\n  toggleExpander = () => this.setState({ isExpanded: !this.state.isExpanded });\n\n  getExpanderButton = () => {\n    const { subRowData } = this.props;\n    let buttonText = this.state.isExpanded ? '-' : '+';\n    if (subRowData.length > 0) return <button onClick={this.toggleExpander}>{buttonText}</button>;\n    else return <></>;\n  }\n\n  getSubRows = () => {\n    const { subRowData } = this.props;\n    return subRowData.map((data, index) => (\n      <tr className=\"sub-row\" key={`subrow-${index}`}>\n        <td></td>\n        <td>{data.question}</td>\n        <td>{data.answer}</td>\n      </tr>\n    ))\n  }\n\n  render() {\n    const { isExpanded } = this.state;\n    const { question, answer, key } = this.props;\n\n    return (\n      <>\n        <tr className=\"main-row\"  key={key}>\n          <td>{this.getExpanderButton()}</td>\n          <td>{question}</td>\n          <td>{answer}</td>\n        </tr>\n        {\n          isExpanded && this.getSubRows()\n        }\n      </>\n    )\n  }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport data from \"./data\";\nimport TableRow from './TableRow';\n\nfunction App() {\n  const getModifiedData = () => {\n    let modifiedData = [], temp = {};\n    data.forEach(element => {\n      if (!temp.hasOwnProperty(element.question)) temp[element.question] = [];\n      temp[element.question].push({\n        question: element.question,\n        answer: element.answer\n      })\n    });\n    Object.keys(temp).forEach(key => {\n      let currentRow = { ...temp[key][0] };\n      let subRows = [];\n      if (temp[key].length > 1) subRows = temp[key].slice(1);\n      currentRow['subRowData'] = subRows;\n      modifiedData.push(currentRow);\n    });\n    return modifiedData;\n  }\n\n  console.log({\n    data,\n    data1: getModifiedData()\n  })\n  return (\n    <div className=\"App\">\n      <table>\n        <thead>\n          <tr>\n            <th>INDEX</th>\n            <th>QUESTIONS</th>\n            <th>ANSWERS</th>\n          </tr>\n        </thead>\n        <tbody>\n          {\n           getModifiedData().map((row, index) =>\n              <TableRow key={`row-${index}`} question={row.question} answer={row.answer} subRowData={row.subRowData} />\n            )\n          }\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}